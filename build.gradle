import groovy.json.JsonOutput

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'io.github.krezerenko'
//version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.register("wipeDatabase", Delete) {
	delete "postgres/data/pgdata"
}

tasks.register("createTunnel", Exec) {
	dependsOn(tasks.named("removeTunnel"))
    def tunnelFile = file("cloudflare/tunnel.txt")
    commandLine "docker", "run", "-d", "--name", "cloudflare", "--rm",
            "-v", "\"${tunnelFile.absolutePath}:/mnt/tunnel.txt\"",
            "cloudflare/cloudflared", "tunnel", "--url", "http://host.docker.internal:8080", "--logfile", "/mnt/tunnel.txt"
	doLast {
		sleep(10000)
		def lines = tunnelFile.readLines()
		if (lines.size() < 5) throw new GradleException("File has fewer than 5 lines")
		String fifthLine = lines[4]

		def match = fifthLine =~ /.*?\| +(.+?) +\|.*/
		if (!match) throw new GradleException("No match found in line 5")

		def tunnelUrl = match.group(1)
		println "Result: ${tunnelUrl}"

		project.setProperty("tunnel_url", tunnelUrl)
	}
	finalizedBy(tasks.named("postTunnelUrl"))
}

tasks.register("removeTunnel", Exec) {
    commandLine "docker", "rm", "-f", "cloudflare"
    def file = file("cloudflare/tunnel.txt")
    file.write("")
}

tasks.register("postTunnelUrl", Exec) {
	doFirst {
		def tunnelUrl = project.getProperties().get("tunnel_url")
		if (!tunnelUrl) throw new GradleException("No tunnel url")

		def gistToken = file("cloudflare/gist_token").text.trim()
		def gistId = file("cloudflare/gist_id").text.trim()

//        def jsonBody = JsonOutput.toJson([files: [link: [content: tunnelUrl]]])
		def body = "\"{\\\"files\\\":{\\\"link\\\":{\\\"content\\\":\\\"${tunnelUrl}\\\"}}}\""
		commandLine "curl", "-L", "-X", "PATCH", "-o", "\$null",
				"-H", "\"Accept: application/vnd.github+json\"",
				"-H", "\"Authorization: Bearer ${gistToken}\"",
				"-H", "\"X-GitHub-Api-Version: 2022-11-28\"",
				"https://api.github.com/gists/${gistId}",
				"-d", body
	}
}

tasks.register("dockerBuild", Exec) {
	dependsOn tasks.named("dockerStop")
	commandLine "docker", "build", "-t", "restapi", "."
}

tasks.register("dockerStart", Exec) {
	dependsOn tasks.named("build")
	commandLine "docker", "compose", "up", "-d"
}

tasks.register("dockerStop", Exec) {
	commandLine "docker", "compose", "down"
}

tasks.named("build") {
	finalizedBy tasks.named("dockerBuild")
}

tasks.named('test', Test) {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}

	// For configuration cache compatibility
	systemProperty 'user.timezone', providers.systemProperty('user.timezone').getOrElse('UTC')
}
